snippet dm "Describe model"
require 'rails_helper'
endsnippet

snippet  nv "not valid"
it "is not valid" do
  expect(${1}).not_to be_valid
end
endsnippet

snippet  bt "expect to be be true"
it "is returns true" do
  expect(${1}).to be_truthy
end
endsnippet

snippet ise "it is expected" b
it { is_expected.to ${1} }
endsnippet

snippet rdesc "RSpec Describe"
RSpec.describe ${1} do
  ${2}
end
endsnippet

snippet descm "describe class method" b
describe '.${1:class_method_name}' do
  subject { described_class.$1 }

  it '${2}' do
    ${3}
  end
end
endsnippet

snippet desi "describe instance method" b
describe '#${1:instance_method}' do
  subject { described_class.new.$1 }

  it '${2}' do
    ${3}
  end
end
endsnippet

snippet rmatch "Define rspec matcher"
RSpec::Matchers.define :${1:matcher_name} do |expected|
  match do |actual|
    ${2}
  end
end
endsnippet

snippet fail "define failure message in matcher"
failure_message_for_should do |actual|
  "expected that #{actual} would ${1} #{expected}"
end
endsnippet

snippet rnc "require namespace creator" b
require 'support/namespace_creator'
endsnippet

global !p
def snake_case_humanize(snake_cased):
    result = ''
    for part in snake_cased.split('_'):
        result += part.capitalize()

    return result

def transform_namespace_exceptions(item):
    exceptions = {
	  'Ncdr': 'NCDR',
	  'CathPci': 'CathPCI',
	  'Xml': 'XML',
	  'Sts': 'STS'
	}

    for exception, new in exceptions.items():
       item = item.replace(exception, new)

    return item
endglobal

snippet libdesc
# frozen_string_literal: true

module `!p path_parts = cleaned_path.split('/')
class_name = snake_case_humanize(path_parts.pop())
module_parts = []
for part in path_parts:
    humanized = snake_case_humanize(part)
    module_parts.append(transform_namespace_exceptions(humanized))
snip.rv = '::'.join(module_parts)
`
  RSpec.describe `!p snip.rv = class_name` do
    subject(:instance) { described_class.new }

  end
end
endsnippet

snippet itdel "it is expected to delegate method"
it { is_expected.to delegate_method(:${1:method_name}).to(:${2:target}) }
endsnippet

snippet itdelpre "it is expected to delegate method with prefix"
it { is_expected.to delegate_method(:${1:method_name}).to(:${2:target}).with_prefix(${3:prefix}) }
endsnippet

snippet valpres
it { is_expected.to validate_presence_of(${1}) }
endsnippet

snippet have_db_index
it { is_expected.to have_db_index(${1}) }
endsnippet

snippet belong_to
it { is_expected.to belong_to(${1}) }
endsnippet

snippet shared_def "define shared examples"
RSpec.shared_examples '${1:description}' do
  ${2}
end
endsnippet

snippet subin "subject instance"
subject(:$1) { described_class.new($2) }
endsnippet

snippet letin "let instance double"
let(:$1) { instance_double('$2') }
endsnippet

snippet 'dummytest'
it 'does something' do
  require 'pry'; binding.pry
  expect(1).to eq 1
end
endsnippet


